#! /usr/bin/env python
# -*- coding:Utf-8 -*-
# tic tac toe
# os, time - python2.7.1 (fr, tab)
#
from os import system as _
from time import sleep

# VARIABLES
GRILLE = """
 7 | 8 | 9 
 --+---+--
 4 | 5 | 6 
 --+---+-- 
 1 | 2 | 3 """

grille_corresp = {} # init
for i in xrange(9): grille_corresp[i+1] = " " # correspondance case de GRILLE (numéro) / contenu (forme joueur) # {1:'x', 2:'o', 3:' '} # j1, j2, vide

# CLASSES
try:
	from userlib import User as Joueur
except:
	class Joueur:
		def __init__(self, forme):
			self.forme = str(forme)[0]
			self.victoires = int(0)

# FONCTIONS
def init():
	global GRILLE
	GRILLE = """
 7 | 8 | 9 
 --+---+-- 
 4 | 5 | 6 
 --+---+-- 
 1 | 2 | 3 """
	global grille_corresp
	grille_corresp = {}
	for i in range(9): grille_corresp[i+1] = " "

def placer(case, joueur):
	global grille_corresp
	if grille_corresp[case] == " ": # si case vide
		grille_corresp[case] = joueur.forme # placer forme joueur
	elif grille_corresp[case] == joueur.forme:
		print "Tu as déjà joué ici..."
		sleep(1.3)
		rafraichir()
		tour(joueur)
	else: # -> forme de l'autre joueur
		print "Ne triche pas !"
		sleep(1.3)
		print "Tu passes ton tour."
		sleep(1)
		return

def rafraichir():
	_('clear')
	_grille = str() # init
	for caract in GRILLE:
		if caract.isdigit(): # si caract est case
			_grille = _grille + grille_corresp[int(caract)] # remplacer par la forme contenue (dans grille_corresp)
		else:
			_grille = _grille + caract
	print _grille

def tour(joueur):
	position = raw_input("\nOù jouer, " + joueur.forme + " ? ") # [:1] -> pour prendre [0] ou "" si pas d'entrée
	# EGG EASTER
	if position == "Baptiste est le plus beau":
		for e in grille_corresp:
			if grille_corresp[e] == " ":
				placer(e, joueur)
	# END EGG EASTER
	if not position[:1].isdigit() or position[:1] == "0":
		rafraichir()
		return # fin du tour (passe son tour)
	placer( int(position[:1]) , joueur)
	rafraichir()

def ligne_de(forme):
	g = grille_corresp # raccourci
	if (g[1]==g[4] and g[4]==g[7] and g[7]==forme) or (g[1]==g[5] and g[5]==g[9] and g[9]==forme) or (g[1]==g[2] and g[2]==g[3] and g[3]==forme) or (g[2]==g[5] and g[5]==g[8] and g[8]==forme) or (g[3]==g[5] and g[5]==g[7] and g[7]==forme) or (g[3]==g[6] and g[6]==g[9] and g[9]==forme) or (g[7]==g[8] and g[8]==g[9] and g[9]==forme) or (g[4]==g[5] and g[5]==g[6] and g[6]==forme): # incompréhensible, haha # combinaisons de toutes les lignes possibles
		return True
	else:
		return False

def partie(j1, j2):
	while True: # break
		def jouer(j):
			tour(j)
			if ligne_de(j.forme):
				print "\nLes " + j.forme + " ont gagné !"
				j.victoires += 1
				sleep(2)
				return 1
			if not " " in grille_corresp.values():
				print "\nÉgalité..."
				sleep(2)
				return 1
		if j1.victoires > j2.victoires:
			if jouer(j2) == 1:
				sleep(2)
				return 0
			jouer(j1)
		elif j2.victoires > j1.victoires:
			if jouer(j1) == 1:
				sleep(2)
				return 0
			jouer(j2)
		else:
			if jouer(j1) == 1:
				sleep(2)
				return 0
			jouer(j2)

def main():
	_('clear')
	j1 = Joueur(raw_input('Forme du joueur 1 : ') + ' ') # init des joueurs + leurs formes
	j2 = Joueur(raw_input('Forme du joueur 2 : ') + ' ') # + ' ' -> pour éviter IndexError dans la __init__ de Joueur
	if j1.forme == ' ': # si pas d'entrée
		j1 = Joueur('x')
		if j2.forme == 'x':
			j1 = Joueur('o')
	if j2.forme == ' ': # si pas d'entrée
		j2 = Joueur('o')
		if j1.forme == 'o':
			j2 = Joueur('x')

	autre_partie = 'o' # init
	while autre_partie[:1] != 'n': # autre_partie[:1] -> pour prendre le premier caract ou '' si entrée vide
		init()
		rafraichir()
		partie(j1, j2)
		if j1.victoires > j2.victoires:
			print "\nÇa fait " + str(j1.victoires) + " à " + str(j2.victoires) + " pour les " + j1.forme + " !"
		elif j2.victoires > j1.victoires:
			print "\nÇa fait " + str(j2.victoires) + " à " + str(j1.victoires) + " pour les " + j2.forme + " !"
		else:
			print "\n" + str(j1.victoires) + " partout !"

		autre_partie = raw_input("\nOn rejoue ? ")

main()
